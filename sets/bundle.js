let position = {x: 0, y: 0};
let raw_scale = 0.0;
let scale = 1.0;

let canvas$1;

function onMouseMove(event) {
  if ((event.buttons & 1) == 1)
  {
    let delta = {x: event.movementX, y: event.movementY};

    position.x -= delta.x / canvas$1.width / scale * 3.0;
    position.y += delta.y / canvas$1.height / scale * 3.0;

    
    const radius = Math.sqrt(position.x * position.x + position.y * position.y);
    if (radius > 2) {
      let radialCoefficent = Math.min(radius, 2.0) / radius;
      position.x *= radialCoefficent;
      position.y *= radialCoefficent;
    }
  }
} /* onMouseMove */

function onWheel(event) {
  raw_scale = raw_scale + event.deltaY / 1000.0;
  raw_scale = Math.max(raw_scale, 0);
  scale = Math.pow(8, raw_scale);

  event.preventDefault();
} /* onWheel */

function init$1(canvas_for) {
  canvas$1 = canvas_for;
  
  // configure input
  canvas$1.addEventListener("mousemove", onMouseMove);
  canvas$1.addEventListener("wheel", onWheel);
}

async function loadShaderModule(gl, type, path) {
  const src = await fetch(path).then(response => response.text());
  const shader = gl.createShader(type);

  gl.shaderSource(shader, src);
  gl.compileShader(shader);

  const res = gl.getShaderInfoLog(shader);
  if (res != null && res.length > 0)
    console.error(`Shader module compilation error: ${res}`);

  return shader;
} /* loadShaderModule */

async function loadShader(gl, path) {

  // Wait compilation of all shaders
  let res = await Promise.all([
    loadShaderModule(gl, gl.VERTEX_SHADER, path + "/vert.glsl?" + Math.random().toString()),
    loadShaderModule(gl, gl.FRAGMENT_SHADER, path + "/frag.glsl?" + Math.random().toString()),
  ]);

  let program = gl.createProgram();

  gl.attachShader(program, res[0]);
  gl.attachShader(program, res[1]);
  gl.linkProgram(program);

  if (!gl.getProgramParameter(program, gl.LINK_STATUS))
    console.error(`Shader ${path} linking error: ${gl.getProgramInfoLog(program)}`);

  return program;
} /* loadShader */

let gl$1;

async function juliaSet() {
  let set = {
    real            : null, // real part slider
    imaginary       : null, // imaginary part slider
    coefficentBlock : null, // imaginary setting block

    shader          : null, // set shader
    oldInnerHTML    : "",   // 

    onResponse : function() {
      // send 'C' parameter for Julia set equasion
      let paramLocation = gl$1.getUniformLocation(this.shader, "CParam");
      if (paramLocation != null)
        gl$1.uniform2f(paramLocation, this.real.value, this.imaginary.value);
    },

    onApply : function(active) {
      [this.coefficentBlock.innerHTML, this.oldInnerHTML] = [this.oldInnerHTML, this.coefficentBlock.innerHTML];
      if (active) {
        const fields = ["real", "imaginary"];
        fields.forEach(field => set[field] = document.getElementById(field));
      }
    }
  };

  set.shader = await loadShader(gl$1, "./shaders/sets/julia");
  set.coefficentBlock = document.getElementById("juliaCoefficents");
  [set.coefficentBlock.innerHTML, set.oldInnerHTML] = [set.oldInnerHTML, set.coefficentBlock.innerHTML];

  return set;
} /* juliaSet */

async function mandelbrotSet() {
  let set = {
    shader : null,

    onResponse : function() {
    },

    onApply : function(active) {
    }
  };

  set.shader = await loadShader(gl$1, "./shaders/sets/mandelbrot");

  return set;
} /* mandelbrotSet */

let sets = {};      // object that contains all sets
let current = null; // active set

function bind(name) {
  let newCurrentSet = sets[name];

  if (newCurrentSet != undefined) {
    current.onApply(false);
    newCurrentSet.onApply(true);
    current = newCurrentSet;
  } else {
    throw Error(`Set ${select.value} doesn't exist`);
  }
}

async function init(glctx) {
  gl$1 = glctx;
  // create sets
  sets = {
    "Julia" : await juliaSet(),
    "Mandelbrot" : await mandelbrotSet()
  };
  current = sets["Mandelbrot"];
  current.onApply(true);
} /* initSets */

let gl = null;
let canvas = null;

let posBuf = null;

async function render() {
  if(gl == null || current == null)
    return;

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.clearColor(0, 1, 0, 0);

  gl.useProgram(current.shader);
  current.onResponse(true);

  // camera params
  let positionLocation = gl.getUniformLocation(current.shader, "Position");
  if (positionLocation != null)
    gl.uniform2f(positionLocation, position.x, position.y);

  let scaleLocation = gl.getUniformLocation(current.shader, "Scale");
  if (scaleLocation != null)
    gl.uniform1f(scaleLocation, scale);

  // set color
  let colorLocation = gl.getUniformLocation(current.shader, "Color");
  if (colorLocation != null) {
    let picker = document.getElementById("setColorPicker");
    let colorCoefficent = document.getElementById("setColorCoefficent");
    let color = parseInt(picker.value.slice(1, 7), 16);
    let rgb = {r: (color >> 16) & 0xFF, g: (color >> 8) & 0xFF, b: (color >> 0) & 0xFF};
    
    gl.uniform3f(colorLocation, colorCoefficent.value * rgb.r / 255.0, colorCoefficent.value * rgb.g / 255.0, colorCoefficent.value * rgb.b / 255.0);
  }
  let projectionLocation = gl.getUniformLocation(current.shader, "Projection");
  if (projectionLocation != null) {
    let wp = 1, hp = 1;

    if (canvas.width > canvas.height) {
      wp *= canvas.width / canvas.height;
    } else {
      hp *= canvas.height / canvas.width;
    }

    gl.uniform2f(projectionLocation, wp, hp);
  }

  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

  gl.finish();

  window.requestAnimationFrame(render);
} /* render */

async function initPrimitive() {
  // create fullscreen primitive
  const posLoc = gl.getAttribLocation(current.shader, "inPos");
  const pos = [
    -1, -1, 0, 1,
    -1,  1, 0, 1,
    1, -1, 0, 1,
    1,  1, 0, 1,
  ];
  posBuf = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, posBuf);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(pos), gl.STATIC_DRAW);
  gl.vertexAttribPointer(posLoc, 4, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(posLoc);
} /* initPrimitive */

// WebGL initialization
canvas = document.getElementById("glCanvas");
gl = canvas.getContext("webgl2");

await init(gl);
bind("Mandelbrot");
await initPrimitive();

// configure set selector
let select$1 = document.getElementById("setTypeSelector");
let heading = document.getElementById("heading");
select$1.addEventListener("change", (Element, Event) => {
  bind(select$1.value);
  heading.innerHTML = `The ${select$1.value} set`;
});

init$1(canvas);

window.requestAnimationFrame(render);

export { render };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
